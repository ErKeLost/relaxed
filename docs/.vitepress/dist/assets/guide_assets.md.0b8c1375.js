import{_ as s,c as e,o as a,a as n}from"./app.1478ba28.js";const u=JSON.parse('{"title":"Static Asset Handling","description":"","frontmatter":{},"headers":[{"level":2,"title":"Importing Asset as URL","slug":"importing-asset-as-url"},{"level":3,"title":"Explicit URL Imports","slug":"explicit-url-imports"},{"level":3,"title":"Importing Asset as String","slug":"importing-asset-as-string"},{"level":3,"title":"Importing Script as a Worker","slug":"importing-script-as-a-worker"},{"level":2,"title":"The public Directory","slug":"the-public-directory"},{"level":2,"title":"new URL(url, import.meta.url)","slug":"new-url-url-import-meta-url"}],"relativePath":"guide/assets.md"}'),o={name:"guide/assets.md"},l=n(`<h1 id="static-asset-handling" tabindex="-1">Static Asset Handling <a class="header-anchor" href="#static-asset-handling" aria-hidden="true">#</a></h1><ul><li>Related: <a href="./build.html#public-base-path">Public Base Path</a></li><li>Related: <a href="/config/shared-options.html#assetsinclude"><code>assetsInclude</code> config option</a></li></ul><h2 id="importing-asset-as-url" tabindex="-1">Importing Asset as URL <a class="header-anchor" href="#importing-asset-as-url" aria-hidden="true">#</a></h2><p>Importing a static asset will return the resolved public URL when it is served:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> imgUrl </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./img.png</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hero-img</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> imgUrl</span></span>
<span class="line"></span></code></pre></div><p>For example, <code>imgUrl</code> will be <code>/img.png</code> during development, and become <code>/assets/img.2d8efhg.png</code> in the production build.</p><p>The behavior is similar to webpack&#39;s <code>file-loader</code>. The difference is that the import can be either using absolute public paths (based on project root during dev) or relative paths.</p><ul><li><p><code>url()</code> references in CSS are handled the same way.</p></li><li><p>If using the Vue plugin, asset references in Vue SFC templates are automatically converted into imports.</p></li><li><p>Common image, media, and font filetypes are detected as assets automatically. You can extend the internal list using the <a href="/config/shared-options.html#assetsinclude"><code>assetsInclude</code> option</a>.</p></li><li><p>Referenced assets are included as part of the build assets graph, will get hashed file names, and can be processed by plugins for optimization.</p></li><li><p>Assets smaller in bytes than the <a href="/config/build-options.html#build-assetsinlinelimit"><code>assetsInlineLimit</code> option</a> will be inlined as base64 data URLs.</p></li></ul><h3 id="explicit-url-imports" tabindex="-1">Explicit URL Imports <a class="header-anchor" href="#explicit-url-imports" aria-hidden="true">#</a></h3><p>Assets that are not included in the internal list or in <code>assetsInclude</code>, can be explicitly imported as an URL using the <code>?url</code> suffix. This is useful, for example, to import <a href="https://houdini.how/usage" target="_blank" rel="noopener noreferrer">Houdini Paint Worklets</a>.</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> workletURL </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">extra-scalloped-border/worklet.js?url</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">CSS</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">paintWorklet</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">addModule</span><span style="color:#A6ACCD;">(workletURL)</span></span>
<span class="line"></span></code></pre></div><h3 id="importing-asset-as-string" tabindex="-1">Importing Asset as String <a class="header-anchor" href="#importing-asset-as-string" aria-hidden="true">#</a></h3><p>Assets can be imported as strings using the <code>?raw</code> suffix.</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> shaderString </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./shader.glsl?raw</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h3 id="importing-script-as-a-worker" tabindex="-1">Importing Script as a Worker <a class="header-anchor" href="#importing-script-as-a-worker" aria-hidden="true">#</a></h3><p>Scripts can be imported as web workers with the <code>?worker</code> or <code>?sharedworker</code> suffix.</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Separate chunk in the production build</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Worker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./shader.js?worker</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// sharedworker</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> SharedWorker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./shader.js?sharedworker</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> sharedWorker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">SharedWorker</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Inlined as base64 strings</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> InlineWorker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./shader.js?worker&amp;inline</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>Check out the <a href="./features.html#web-workers">Web Worker section</a> for more details.</p><h2 id="the-public-directory" tabindex="-1">The <code>public</code> Directory <a class="header-anchor" href="#the-public-directory" aria-hidden="true">#</a></h2><p>If you have assets that are:</p><ul><li>Never referenced in source code (e.g. <code>robots.txt</code>)</li><li>Must retain the exact same file name (without hashing)</li><li>...or you simply don&#39;t want to have to import an asset first just to get its URL</li></ul><p>Then you can place the asset in a special <code>public</code> directory under your project root. Assets in this directory will be served at root path <code>/</code> during dev, and copied to the root of the dist directory as-is.</p><p>The directory defaults to <code>&lt;root&gt;/public</code>, but can be configured via the <a href="/config/shared-options.html#publicdir"><code>publicDir</code> option</a>.</p><p>Note that:</p><ul><li>You should always reference <code>public</code> assets using root absolute path - for example, <code>public/icon.png</code> should be referenced in source code as <code>/icon.png</code>.</li><li>Assets in <code>public</code> cannot be imported from JavaScript.</li></ul><h2 id="new-url-url-import-meta-url" tabindex="-1">new URL(url, import.<wbr>meta.url) <a class="header-anchor" href="#new-url-url-import-meta-url" aria-hidden="true">#</a></h2><p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import%2Emeta" target="_blank" rel="noopener noreferrer">import.<wbr>meta.url</a> is a native ESM feature that exposes the current module&#39;s URL. Combining it with the native <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL" target="_blank" rel="noopener noreferrer">URL constructor</a>, we can obtain the full, resolved URL of a static asset using relative path from a JavaScript module:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> imgUrl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./img.png</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">href</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hero-img</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> imgUrl</span></span>
<span class="line"></span></code></pre></div><p>This works natively in modern browsers - in fact, Vite doesn&#39;t need to process this code at all during development!</p><p>This pattern also supports dynamic URLs via template literals:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">getImageUrl</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">./dir/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">name</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.png</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">href</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>During the production build, Vite will perform necessary transforms so that the URLs still point to the correct location even after bundling and asset hashing. However, the URL string must be static so it can be analyzed, otherwise the code will be left as is, which can cause runtime errors if <code>build.target</code> does not support <code>import.<wbr>meta.url</code></p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Vite will not transform this</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> imgUrl </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#A6ACCD;">(imagePath</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">href</span></span>
<span class="line"></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">Does not work with SSR</p><p>This pattern does not work if you are using Vite for Server-Side Rendering, because <code>import.<wbr>meta.url</code> have different semantics in browsers vs. Node.js. The server bundle also cannot determine the client host URL ahead of time.</p></div><div class="warning custom-block"><p class="custom-block-title"><code>target</code> needs to be <code>es2020</code> or higher</p><p>This pattern will not work if <a href="/config/build-options.html#build-target">build-target</a> or <a href="/config/dep-optimization-options.html#optimizedeps-esbuildoptions">optimizedeps.esbuildoptions.target</a> is set to a value lower than <code>es2020</code>.</p></div>`,37),t=[l];function p(r,i,c,d,y,D){return a(),e("div",null,t)}var F=s(o,[["render",p]]);export{u as __pageData,F as default};
