import{_ as s,c as e,o as n,a}from"./app.1478ba28.js";const A=JSON.parse('{"title":"Server Options","description":"","frontmatter":{},"headers":[{"level":2,"title":"server.host","slug":"server-host"},{"level":2,"title":"server.port","slug":"server-port"},{"level":2,"title":"server.strictPort","slug":"server-strictport"},{"level":2,"title":"server.https","slug":"server-https"},{"level":2,"title":"server.open","slug":"server-open"},{"level":2,"title":"server.proxy","slug":"server-proxy"},{"level":2,"title":"server.cors","slug":"server-cors"},{"level":2,"title":"server.headers","slug":"server-headers"},{"level":2,"title":"server.hmr","slug":"server-hmr"},{"level":2,"title":"server.watch","slug":"server-watch"},{"level":2,"title":"server.middlewareMode","slug":"server-middlewaremode"},{"level":2,"title":"server.base","slug":"server-base"},{"level":2,"title":"server.fs.strict","slug":"server-fs-strict"},{"level":2,"title":"server.fs.allow","slug":"server-fs-allow"},{"level":2,"title":"server.fs.deny","slug":"server-fs-deny"},{"level":2,"title":"server.origin","slug":"server-origin"}],"relativePath":"config/server-options.md"}'),o={name:"config/server-options.md"},l=a(`<h1 id="server-options" tabindex="-1">Server Options <a class="header-anchor" href="#server-options" aria-hidden="true">#</a></h1><h2 id="server-host" tabindex="-1">server.host <a class="header-anchor" href="#server-host" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string | boolean</code></li><li><strong>Default:</strong> <code>&#39;localhost&#39;</code></li></ul><p>Specify which IP addresses the server should listen on. Set this to <code>0.0.0.0</code> or <code>true</code> to listen on all addresses, including LAN and public addresses.</p><p>This can be set via the CLI using <code>--host 0.0.0.0</code> or <code>--host</code>.</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>There are cases when other servers might respond instead of Vite.</p><p>The first case is when <code>localhost</code> is used. Node.js below v17 reorders the result of DNS-resolved address by default. When accessing <code>localhost</code>, browsers use DNS to resolve the address and that address might differ from the address which Vite is listening. Vite prints the resolved address when it differs.</p><p>You could set <a href="https://nodejs.org/api/dns.html#dns_dns_setdefaultresultorder_order" target="_blank" rel="noopener noreferrer"><code>dns.setDefaultResultOrder(&#39;verbatim&#39;)</code></a> to disable the reordering behavior. Or you could set <code>server.host</code> to <code>127.0.0.1</code> explicitly.</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> dns </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dns</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">dns</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setDefaultResultOrder</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">verbatim</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// omit</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>The second case is when wildcard hosts (e.g. <code>0.0.0.0</code>) is used. This is because servers listening on non-wildcard hosts take priority over those listening on wildcard hosts.</p></div><h2 id="server-port" tabindex="-1">server.port <a class="header-anchor" href="#server-port" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <code>5173</code></li></ul><p>Specify server port. Note if the port is already being used, Vite will automatically try the next available port so this may not be the actual port the server ends up listening on.</p><h2 id="server-strictport" tabindex="-1">server.strictPort <a class="header-anchor" href="#server-strictport" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li></ul><p>Set to <code>true</code> to exit if port is already in use, instead of automatically trying the next available port.</p><h2 id="server-https" tabindex="-1">server.https <a class="header-anchor" href="#server-https" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean | https.ServerOptions</code></li></ul><p>Enable TLS + HTTP/2. Note this downgrades to TLS only when the <a href="#server-proxy"><code>server.proxy</code> option</a> is also used.</p><p>The value can also be an <a href="https://nodejs.org/api/https.html#https_https_createserver_options_requestlistener" target="_blank" rel="noopener noreferrer">options object</a> passed to <code>https.createServer()</code>.</p><p>A valid certificate is needed. For a basic setup, you can add <a href="https://github.com/vitejs/vite-plugin-basic-ssl" target="_blank" rel="noopener noreferrer">@vitejs/plugin-basic-ssl</a> to the project plugins, which will automatically create and cache a self-signed certificate. But we recommend creating your own certificates.</p><h2 id="server-open" tabindex="-1">server.open <a class="header-anchor" href="#server-open" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean | string</code></li></ul><p>Automatically open the app in the browser on server start. When the value is a string, it will be used as the URL&#39;s pathname. If you want to open the server in a specific browser you like, you can set the env <code>process.<wbr>env.BROWSER</code> (e.g. <code>firefox</code>). See <a href="https://github.com/sindresorhus/open#app" target="_blank" rel="noopener noreferrer">the <code>open</code> package</a> for more details.</p><p><strong>Example:</strong></p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">open</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/docs/index.html</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="server-proxy" tabindex="-1">server.proxy <a class="header-anchor" href="#server-proxy" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>Record&lt;string, string | ProxyOptions&gt;</code></li></ul><p>Configure custom proxy rules for the dev server. Expects an object of <code>{ key: options }</code> pairs. If the key starts with <code>^</code>, it will be interpreted as a <code>RegExp</code>. The <code>configure</code> option can be used to access the proxy instance.</p><p>Uses <a href="https://github.com/http-party/node-http-proxy" target="_blank" rel="noopener noreferrer"><code>http-proxy</code></a>. Full options <a href="https://github.com/http-party/node-http-proxy#options" target="_blank" rel="noopener noreferrer">here</a>.</p><p>In some cases, you might also want to configure the underlying dev server (e.g. to add custom middlewares to the internal <a href="https://github.com/senchalabs/connect" target="_blank" rel="noopener noreferrer">connect</a> app). In order to do that, you need to write your own <a href="/guide/using-plugins.html">plugin</a> and use <a href="/guide/api-plugin.html#configureserver">configureServer</a> function.</p><p><strong>Example:</strong></p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">proxy</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// string shorthand</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">/foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://localhost:4567</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// with options</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://jsonplaceholder.typicode.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">changeOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">rewrite</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">api</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// with RegEx</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">^/fallback/.*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://jsonplaceholder.typicode.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">changeOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">rewrite</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">replace</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;font-style:italic;">^</span><span style="color:#A6ACCD;">\\/</span><span style="color:#C3E88D;">fallback</span><span style="color:#89DDFF;">/</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// Using the proxy instance</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">/api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://jsonplaceholder.typicode.com</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">changeOrigin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">configure</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">proxy</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> options</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">          </span><span style="color:#676E95;font-style:italic;">// proxy will be an instance of &#39;http-proxy&#39;</span></span>
<span class="line"><span style="color:#F07178;">        </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// Proxying websockets or socket.io</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">/socket.io</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">target</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">ws://localhost:5173</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">ws</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="server-cors" tabindex="-1">server.cors <a class="header-anchor" href="#server-cors" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean | CorsOptions</code></li></ul><p>Configure CORS for the dev server. This is enabled by default and allows any origin. Pass an <a href="https://github.com/expressjs/cors" target="_blank" rel="noopener noreferrer">options object</a> to fine tune the behavior or <code>false</code> to disable.</p><h2 id="server-headers" tabindex="-1">server.headers <a class="header-anchor" href="#server-headers" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>OutgoingHttpHeaders</code></li></ul><p>Specify server response headers.</p><h2 id="server-hmr" tabindex="-1">server.hmr <a class="header-anchor" href="#server-hmr" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean | { protocol?: string, host?: string, port?: number, path?: string, timeout?: number, overlay?: boolean, clientPort?: number, server?: Server }</code></li></ul><p>Disable or configure HMR connection (in cases where the HMR websocket must use a different address from the http server).</p><p>Set <code>server.hmr.overlay</code> to <code>false</code> to disable the server error overlay.</p><p><code>clientPort</code> is an advanced option that overrides the port only on the client side, allowing you to serve the websocket on a different port than the client code looks for it on.</p><p>When <code>server.hmr.server</code> is defined, Vite will process the HMR connection requests through the provided server. If not in middleware mode, Vite will attempt to process HMR connection requests through the existing server. This can be helpful when using self-signed certificates or when you want to expose Vite over a network on a single port.</p><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>With the default configuration, reverse proxies in front of Vite are expected to support proxying WebSocket. If the Vite HMR client fails to connect WebSocket, the client will fallback to connecting the WebSocket directly to the Vite HMR server bypassing the reverse proxies:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">Direct websocket connection fallback. Check out https://vitejs.dev/config/server-options.html#server-hmr to remove the previous connection error.</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>The error that appears in the Browser when the fallback happens can be ignored. To avoid the error by directly bypassing reverse proxies, you could either:</p><ul><li>configure the reverse proxy to proxy WebSocket too</li><li>set <a href="#server-strictport"><code>server.strictPort = true</code></a> and set <code>server.hmr.clientPort</code> to the same value with <code>server.port</code></li><li>set <code>server.hmr.port</code> to a different value from <a href="#server-port"><code>server.port</code></a></li></ul></div><h2 id="server-watch" tabindex="-1">server.watch <a class="header-anchor" href="#server-watch" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>object</code></li></ul><p>File system watcher options to pass on to <a href="https://github.com/paulmillr/chokidar#api" target="_blank" rel="noopener noreferrer">chokidar</a>.</p><p>When running Vite on Windows Subsystem for Linux (WSL) 2, if the project folder resides in a Windows filesystem, you&#39;ll need to set this option to <code>{ usePolling: true }</code>. This is due to <a href="https://github.com/microsoft/WSL/issues/4739" target="_blank" rel="noopener noreferrer">a WSL2 limitation</a> with the Windows filesystem.</p><p>The Vite server watcher skips <code>.git/</code> and <code>node_modules/</code> directories by default. If you want to watch a package inside <code>node_modules/</code>, you can pass a negated glob pattern to <code>server.watch.ignored</code>. That is:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">watch</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">ignored</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">!**/node_modules/your-package-name/**</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// The watched package must be excluded from optimization,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// so that it can appear in the dependency graph and trigger hot reload.</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">exclude</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">your-package-name</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="server-middlewaremode" tabindex="-1">server.middlewareMode <a class="header-anchor" href="#server-middlewaremode" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Create Vite server in middleware mode.</p><ul><li><p><strong>Related:</strong> <a href="./shared-options.html#apptype">appType</a>, <a href="/guide/ssr.html#setting-up-the-dev-server">SSR - Setting Up the Dev Server</a></p></li><li><p><strong>Example:</strong></p></li></ul><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> express </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">express</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">createServer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> createViteServer </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">function</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">createServer</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">app</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">express</span><span style="color:#F07178;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Create Vite server in middleware mode</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">vite</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">createViteServer</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    server</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> middlewareMode</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">    appType</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">custom</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;"> </span><span style="color:#676E95;font-style:italic;">// don&#39;t include Vite&#39;s default HTML handling middlewares</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Use vite&#39;s connect instance as middleware</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">vite</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">middlewares</span><span style="color:#F07178;">)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">app</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">use</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">*</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">async</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">req</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">res</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Since \`appType\` is \`&#39;custom&#39;\`, should serve response here.</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Note: if \`appType\` is \`&#39;spa&#39;\` or \`&#39;mpa&#39;\`, Vite includes middlewares to handle</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// HTML requests and 404s so user middlewares should be added</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// before Vite&#39;s middlewares to take effect instead</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">createServer</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><h2 id="server-base" tabindex="-1">server.base <a class="header-anchor" href="#server-base" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string | undefined</code></li></ul><p>Prepend this folder to http requests, for use when proxying vite as a subfolder. Should start and end with the <code>/</code> character.</p><h2 id="server-fs-strict" tabindex="-1">server.fs.strict <a class="header-anchor" href="#server-fs-strict" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code> (enabled by default since Vite 2.7)</li></ul><p>Restrict serving files outside of workspace root.</p><h2 id="server-fs-allow" tabindex="-1">server.fs.allow <a class="header-anchor" href="#server-fs-allow" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>Restrict files that could be served via <code>/@fs/</code>. When <code>server.fs.strict</code> is set to <code>true</code>, accessing files outside this directory list that aren&#39;t imported from an allowed file will result in a 403.</p><p>Vite will search for the root of the potential workspace and use it as default. A valid workspace met the following conditions, otherwise will fallback to the <a href="/guide/#index-html-and-project-root">project root</a>.</p><ul><li>contains <code>workspaces</code> field in <code>package.json</code></li><li>contains one of the following file <ul><li><code>lerna.json</code></li><li><code>pnpm-workspace.yaml</code></li></ul></li></ul><p>Accepts a path to specify the custom workspace root. Could be a absolute path or a path relative to <a href="/guide/#index-html-and-project-root">project root</a>. For example:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">fs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// Allow serving files from one level up to the project root</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">allow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">..</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>When <code>server.fs.allow</code> is specified, the auto workspace root detection will be disabled. To extend the original behavior, a utility <code>searchForWorkspaceRoot</code> is exposed:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">searchForWorkspaceRoot</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">fs</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">allow</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// search up for workspace root</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#82AAFF;">searchForWorkspaceRoot</span><span style="color:#A6ACCD;">(process</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">cwd</span><span style="color:#A6ACCD;">())</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">        </span><span style="color:#676E95;font-style:italic;">// your custom rules</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/path/to/custom/allow</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">      ]</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="server-fs-deny" tabindex="-1">server.fs.deny <a class="header-anchor" href="#server-fs-deny" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>Blocklist for sensitive files being restricted to be served by Vite dev server.</p><p>Default to <code>[&#39;.env&#39;, &#39;.env.*&#39;, &#39;*.{pem,crt}&#39;]</code>.</p><h2 id="server-origin" tabindex="-1">server.origin <a class="header-anchor" href="#server-origin" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string</code></li></ul><p>Defines the origin of the generated asset URLs during development.</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">server</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">origin</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">http://127.0.0.1:8080</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div>`,76),p=[l];function t(r,c,i,y,D,F){return n(),e("div",null,p)}var C=s(o,[["render",t]]);export{A as __pageData,C as default};
