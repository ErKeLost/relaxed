import{_ as e,c as n,o as s,a}from"./app.1478ba28.js";const u=JSON.parse('{"title":"Env Variables and Modes","description":"","frontmatter":{},"headers":[{"level":2,"title":"Env Variables","slug":"env-variables"},{"level":3,"title":"Production Replacement","slug":"production-replacement"},{"level":2,"title":".env Files","slug":"env-files"},{"level":3,"title":"IntelliSense for TypeScript","slug":"intellisense-for-typescript"},{"level":2,"title":"Modes","slug":"modes"}],"relativePath":"guide/env-and-mode.md"}'),o={name:"guide/env-and-mode.md"},t=a(`<h1 id="env-variables-and-modes" tabindex="-1">Env Variables and Modes <a class="header-anchor" href="#env-variables-and-modes" aria-hidden="true">#</a></h1><h2 id="env-variables" tabindex="-1">Env Variables <a class="header-anchor" href="#env-variables" aria-hidden="true">#</a></h2><p>Vite exposes env variables on the special <strong><code>import.<wbr>meta.env</code></strong> object. Some built-in variables are available in all cases:</p><ul><li><p><strong><code>import.<wbr>meta.env.MODE</code></strong>: {string} the <a href="#modes">mode</a> the app is running in.</p></li><li><p><strong><code>import.<wbr>meta.env.BASE_URL</code></strong>: {string} the base url the app is being served from. This is determined by the <a href="/config/shared-options.html#base"><code>base</code> config option</a>.</p></li><li><p><strong><code>import.<wbr>meta.env.PROD</code></strong>: {boolean} whether the app is running in production.</p></li><li><p><strong><code>import.<wbr>meta.env.DEV</code></strong>: {boolean} whether the app is running in development (always the opposite of <code>import.<wbr>meta.env.PROD</code>)</p></li></ul><h3 id="production-replacement" tabindex="-1">Production Replacement <a class="header-anchor" href="#production-replacement" aria-hidden="true">#</a></h3><p>During production, these env variables are <strong>statically replaced</strong>. It is therefore necessary to always reference them using the full static string. For example, dynamic key access like <code>import.<wbr>meta.env[key]</code> will not work.</p><p>It will also replace these strings appearing in JavaScript strings and Vue templates. This should be a rare case, but it can be unintended. You may see errors like <code>Missing Semicolon</code> or <code>Unexpected token</code> in this case, for example when <code>&quot;process.<wbr>env.</code><wbr><code>NODE_ENV&quot;</code> is transformed to <code>&quot;&quot;development&quot;: &quot;</code>. There are ways to work around this behavior:</p><ul><li><p>For JavaScript strings, you can break the string up with a Unicode zero-width space, e.g. <code>&#39;import.<wbr>meta\\u200b.env.MODE&#39;</code>.</p></li><li><p>For Vue templates or other HTML that gets compiled into JavaScript strings, you can use the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/wbr" target="_blank" rel="noopener noreferrer"><code>&lt;wbr&gt;</code> tag</a>, e.g. <code>import.<wbr>meta.&lt;wbr&gt;env.MODE</code>.</p></li></ul><h2 id="env-files" tabindex="-1"><code>.env</code> Files <a class="header-anchor" href="#env-files" aria-hidden="true">#</a></h2><p>Vite uses <a href="https://github.com/motdotla/dotenv" target="_blank" rel="noopener noreferrer">dotenv</a> to load additional environment variables from the following files in your <a href="/config/shared-options.html#envdir">environment directory</a>:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">.env                # loaded in all cases</span></span>
<span class="line"><span style="color:#A6ACCD;">.env.local          # loaded in all cases, ignored by git</span></span>
<span class="line"><span style="color:#A6ACCD;">.env.[mode]         # only loaded in specified mode</span></span>
<span class="line"><span style="color:#A6ACCD;">.env.[mode].local   # only loaded in specified mode, ignored by git</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">Env Loading Priorities</p><p>An env file for a specific mode (e.g. <code>.env.production</code>) will take higher priority than a generic one (e.g. <code>.env</code>).</p><p>In addition, environment variables that already exist when Vite is executed have the highest priority and will not be overwritten by <code>.env</code> files. For example, when running <code>VITE_SOME_KEY=123 vite build</code>.</p><p><code>.env</code> files are loaded at the start of Vite. Restart the server after making changes.</p></div><p>Loaded env variables are also exposed to your client source code via <code>import.<wbr>meta.env</code> as strings.</p><p>To prevent accidentally leaking env variables to the client, only variables prefixed with <code>VITE_</code> are exposed to your Vite-processed code. e.g. the following file:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">DB_PASSWORD=foobar</span></span>
<span class="line"><span style="color:#A6ACCD;">VITE_SOME_KEY=123</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Only <code>VITE_SOME_KEY</code> will be exposed as <code>import.<wbr>meta.env.VITE_SOME_KEY</code> to your client source code, but <code>DB_PASSWORD</code> will not.</p><p>If you want to customize env variables prefix, see <a href="/config/index.html#envprefix">envPrefix</a> option.</p><div class="warning custom-block"><p class="custom-block-title">SECURITY NOTES</p><ul><li><p><code>.env.*.local</code> files are local-only and can contain sensitive variables. You should add <code>*.local</code> to your <code>.gitignore</code> to avoid them being checked into git.</p></li><li><p>Since any variables exposed to your Vite source code will end up in your client bundle, <code>VITE_*</code> variables should <em>not</em> contain any sensitive information.</p></li></ul></div><h3 id="intellisense-for-typescript" tabindex="-1">IntelliSense for TypeScript <a class="header-anchor" href="#intellisense-for-typescript" aria-hidden="true">#</a></h3><p>By default, Vite provides type definition for <code>import.<wbr>meta.env</code> in <a href="https://github.com/vitejs/vite/blob/main/packages/vite/client.d.ts" target="_blank" rel="noopener noreferrer"><code>vite/client.d.ts</code></a>. While you can define more custom env variables in <code>.env.[mode]</code> files, you may want to get TypeScript IntelliSense for user-defined env variables which prefixed with <code>VITE_</code>.</p><p>To achieve, you can create an <code>env.d.ts</code> in <code>src</code> directory, then augment <code>ImportMetaEnv</code> like this:</p><div class="language-typescript"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/// </span><span style="color:#89DDFF;font-style:italic;">&lt;</span><span style="color:#F07178;font-style:italic;">reference</span><span style="color:#89DDFF;font-style:italic;"> </span><span style="color:#C792EA;font-style:italic;">types</span><span style="color:#89DDFF;font-style:italic;">=</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#C3E88D;font-style:italic;">vite/client</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#89DDFF;font-style:italic;"> /&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMetaEnv</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">VITE_APP_TITLE</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// more env variables...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMeta</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#C792EA;">readonly</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">env</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">ImportMetaEnv</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>If your code relies on types from browser environments such as <a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.dom.d.ts" target="_blank" rel="noopener noreferrer">DOM</a> and <a href="https://github.com/microsoft/TypeScript/blob/main/lib/lib.webworker.d.ts" target="_blank" rel="noopener noreferrer">WebWorker</a>, you can update the <a href="https://www.typescriptlang.org/tsconfig#lib" target="_blank" rel="noopener noreferrer">lib</a> field in <code>tsconfig.json</code>.</p><div class="language-json"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">lib</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">WebWorker</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h2 id="modes" tabindex="-1">Modes <a class="header-anchor" href="#modes" aria-hidden="true">#</a></h2><p>By default, the dev server (<code>dev</code> command) runs in <code>development</code> mode and the <code>build</code> command run in <code>production</code> mode.</p><p>This means when running <code>vite build</code>, it will load the env variables from <code>.env.production</code> if there is one:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;"># .env.production</span></span>
<span class="line"><span style="color:#A6ACCD;">VITE_APP_TITLE=My App</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>In your app, you can render the title using <code>import.<wbr>meta.env.VITE_APP_TITLE</code>.</p><p>However, it is important to understand that <strong>mode</strong> is a wider concept than just development vs. production. A typical example is you may want to have a &quot;staging&quot; mode where it should have production-like behavior, but with slightly different env variables from production.</p><p>You can overwrite the default mode used for a command by passing the <code>--mode</code> option flag. For example, if you want to build your app for our hypothetical staging mode:</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">vite build --mode staging</span></span>
<span class="line"></span></code></pre></div><p>And to get the behavior we want, we need a <code>.env.staging</code> file:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;"># .env.staging</span></span>
<span class="line"><span style="color:#A6ACCD;">NODE_ENV=production</span></span>
<span class="line"><span style="color:#A6ACCD;">VITE_APP_TITLE=My App (staging)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Now your staging app should have production-like behavior, but display a different title from production.</p>`,35),l=[t];function i(r,p,c,d,v,y){return s(),n("div",null,l)}var m=e(o,[["render",i]]);export{u as __pageData,m as default};
