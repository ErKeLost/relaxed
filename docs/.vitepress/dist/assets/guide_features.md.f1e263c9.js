import{_ as s,c as a,o as n,a as e}from"./app.1478ba28.js";var o="/assets/graph.8f2f36b7.png";const A=JSON.parse('{"title":"Features","description":"","frontmatter":{},"headers":[{"level":2,"title":"NPM Dependency Resolving and Pre-Bundling","slug":"npm-dependency-resolving-and-pre-bundling"},{"level":2,"title":"Hot Module Replacement","slug":"hot-module-replacement"},{"level":2,"title":"TypeScript","slug":"typescript"},{"level":3,"title":"TypeScript Compiler Options","slug":"typescript-compiler-options"},{"level":3,"title":"Client Types","slug":"client-types"},{"level":2,"title":"Vue","slug":"vue"},{"level":2,"title":"JSX","slug":"jsx"},{"level":2,"title":"CSS","slug":"css"},{"level":3,"title":"@import Inlining and Rebasing","slug":"import-inlining-and-rebasing"},{"level":3,"title":"PostCSS","slug":"postcss"},{"level":3,"title":"CSS Modules","slug":"css-modules"},{"level":3,"title":"CSS Pre-processors","slug":"css-pre-processors"},{"level":3,"title":"Disabling CSS injection into the page","slug":"disabling-css-injection-into-the-page"},{"level":2,"title":"Static Assets","slug":"static-assets"},{"level":2,"title":"JSON","slug":"json"},{"level":2,"title":"Glob Import","slug":"glob-import"},{"level":3,"title":"Glob Import As","slug":"glob-import-as"},{"level":3,"title":"Multiple Patterns","slug":"multiple-patterns"},{"level":3,"title":"Negative Patterns","slug":"negative-patterns"},{"level":3,"title":"Glob Import Caveats","slug":"glob-import-caveats"},{"level":2,"title":"Dynamic Import","slug":"dynamic-import"},{"level":2,"title":"WebAssembly","slug":"webassembly"},{"level":2,"title":"Web Workers","slug":"web-workers"},{"level":3,"title":"Import with Constructors","slug":"import-with-constructors"},{"level":3,"title":"Import with Query Suffixes","slug":"import-with-query-suffixes"},{"level":2,"title":"Build Optimizations","slug":"build-optimizations"},{"level":3,"title":"CSS Code Splitting","slug":"css-code-splitting"},{"level":3,"title":"Preload Directives Generation","slug":"preload-directives-generation"},{"level":3,"title":"Async Chunk Loading Optimization","slug":"async-chunk-loading-optimization"}],"relativePath":"guide/features.md"}'),l={name:"guide/features.md"},p=e(`<h1 id="features" tabindex="-1">Features <a class="header-anchor" href="#features" aria-hidden="true">#</a></h1><p>At the very basic level, developing using Vite is not that much different from using a static file server. However, Vite provides many enhancements over native ESM imports to support various features that are typically seen in bundler-based setups.</p><h2 id="npm-dependency-resolving-and-pre-bundling" tabindex="-1">NPM Dependency Resolving and Pre-Bundling <a class="header-anchor" href="#npm-dependency-resolving-and-pre-bundling" aria-hidden="true">#</a></h2><p>Native ES imports do not support bare module imports like the following:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">someMethod</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">my-dep</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>The above will throw an error in the browser. Vite will detect such bare module imports in all served source files and perform the following:</p><ol><li><p><a href="./dep-pre-bundling.html">Pre-bundle</a> them to improve page loading speed and convert CommonJS / UMD modules to ESM. The pre-bundling step is performed with <a href="http://esbuild.github.io/" target="_blank" rel="noopener noreferrer">esbuild</a> and makes Vite&#39;s cold start time significantly faster than any JavaScript-based bundler.</p></li><li><p>Rewrite the imports to valid URLs like <code>/node_modules/.vite/deps/my-dep.js?v=f3sf2ebd</code> so that the browser can import them properly.</p></li></ol><p><strong>Dependencies are Strongly Cached</strong></p><p>Vite caches dependency requests via HTTP headers, so if you wish to locally edit/debug a dependency, follow the steps <a href="./dep-pre-bundling.html#browser-cache">here</a>.</p><h2 id="hot-module-replacement" tabindex="-1">Hot Module Replacement <a class="header-anchor" href="#hot-module-replacement" aria-hidden="true">#</a></h2><p>Vite provides an <a href="./api-hmr.html">HMR API</a> over native ESM. Frameworks with HMR capabilities can leverage the API to provide instant, precise updates without reloading the page or blowing away application state. Vite provides first-party HMR integrations for <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-vue" target="_blank" rel="noopener noreferrer">Vue Single File Components</a> and <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-react" target="_blank" rel="noopener noreferrer">React Fast Refresh</a>. There are also official integrations for Preact via <a href="https://github.com/JoviDeCroock/prefresh/tree/main/packages/vite" target="_blank" rel="noopener noreferrer">@prefresh/vite</a>.</p><p>Note you don&#39;t need to manually set these up - when you <a href="./">create an app via <code>create-vite</code></a>, the selected templates would have these pre-configured for you already.</p><h2 id="typescript" tabindex="-1">TypeScript <a class="header-anchor" href="#typescript" aria-hidden="true">#</a></h2><p>Vite supports importing <code>.ts</code> files out of the box.</p><p>Vite only performs transpilation on <code>.ts</code> files and does <strong>NOT</strong> perform type checking. It assumes type checking is taken care of by your IDE and build process (you can run <code>tsc --noEmit</code> in the build script or install <code>vue-tsc</code> and run <code>vue-tsc --noEmit</code> to also type check your <code>*.vue</code> files).</p><p>Vite uses <a href="https://github.com/evanw/esbuild" target="_blank" rel="noopener noreferrer">esbuild</a> to transpile TypeScript into JavaScript which is about 20~30x faster than vanilla <code>tsc</code>, and HMR updates can reflect in the browser in under 50ms.</p><p>Use the <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-8.html#type-only-imports-and-export" target="_blank" rel="noopener noreferrer">Type-Only Imports and Export</a> syntax to avoid potential problems like type-only imports being incorrectly bundled, for example:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">T</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">only/types</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">type</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">T</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="typescript-compiler-options" tabindex="-1">TypeScript Compiler Options <a class="header-anchor" href="#typescript-compiler-options" aria-hidden="true">#</a></h3><p>Some configuration fields under <code>compilerOptions</code> in <code>tsconfig.json</code> require special attention.</p><h4 id="isolatedmodules" tabindex="-1"><code>isolatedModules</code> <a class="header-anchor" href="#isolatedmodules" aria-hidden="true">#</a></h4><p>Should be set to <code>true</code>.</p><p>It is because <code>esbuild</code> only performs transpilation without type information, it doesn&#39;t support certain features like const enum and implicit type-only imports.</p><p>You must set <code>&quot;isolatedModules&quot;: true</code> in your <code>tsconfig.json</code> under <code>compilerOptions</code>, so that TS will warn you against the features that do not work with isolated transpilation.</p><p>However, some libraries (e.g. <a href="https://github.com/vuejs/core/issues/1228" target="_blank" rel="noopener noreferrer"><code>vue</code></a>) don&#39;t work well with <code>&quot;isolatedModules&quot;: true</code>. You can use <code>&quot;skipLibCheck&quot;: true</code> to temporarily suppress the errors until it is fixed upstream.</p><h4 id="usedefineforclassfields" tabindex="-1"><code>useDefineForClassFields</code> <a class="header-anchor" href="#usedefineforclassfields" aria-hidden="true">#</a></h4><p>Starting from Vite 2.5.0, the default value will be <code>true</code> if the TypeScript target is <code>ESNext</code>. It is consistent with the <a href="https://github.com/microsoft/TypeScript/pull/42663" target="_blank" rel="noopener noreferrer">behavior of <code>tsc</code> 4.3.2 and later</a>. It is also the standard ECMAScript runtime behavior.</p><p>But it may be counter-intuitive for those coming from other programming languages or older versions of TypeScript. You can read more about the transition in the <a href="https://www.typescriptlang.org/docs/handbook/release-notes/typescript-3-7.html#the-usedefineforclassfields-flag-and-the-declare-property-modifier" target="_blank" rel="noopener noreferrer">TypeScript 3.7 release notes</a>.</p><p>If you are using a library that heavily relies on class fields, please be careful about the library&#39;s intended usage of it.</p><p>Most libraries expect <code>&quot;useDefineForClassFields&quot;: true</code>, such as <a href="https://mobx.js.org/installation.html#use-spec-compliant-transpilation-for-class-properties" target="_blank" rel="noopener noreferrer">MobX</a>, <a href="https://github.com/vuejs/vue-class-component/issues/465" target="_blank" rel="noopener noreferrer">Vue Class Components 8.x</a>, etc.</p><p>But a few libraries haven&#39;t transitioned to this new default yet, including <a href="https://github.com/lit/lit-element/issues/1030" target="_blank" rel="noopener noreferrer"><code>lit-element</code></a>. Please explicitly set <code>useDefineForClassFields</code> to <code>false</code> in these cases.</p><h4 id="other-compiler-options-affecting-the-build-result" tabindex="-1">Other Compiler Options Affecting the Build Result <a class="header-anchor" href="#other-compiler-options-affecting-the-build-result" aria-hidden="true">#</a></h4><ul><li><a href="https://www.typescriptlang.org/tsconfig#extends" target="_blank" rel="noopener noreferrer"><code>extends</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#importsNotUsedAsValues" target="_blank" rel="noopener noreferrer"><code>importsNotUsedAsValues</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#preserveValueImports" target="_blank" rel="noopener noreferrer"><code>preserveValueImports</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxFactory" target="_blank" rel="noopener noreferrer"><code>jsxFactory</code></a></li><li><a href="https://www.typescriptlang.org/tsconfig#jsxFragmentFactory" target="_blank" rel="noopener noreferrer"><code>jsxFragmentFactory</code></a></li></ul><p>If migrating your codebase to <code>&quot;isolatedModules&quot;: true</code> is an unsurmountable effort, you may be able to get around it with a third-party plugin such as <a href="https://www.npmjs.com/package/rollup-plugin-friendly-type-imports" target="_blank" rel="noopener noreferrer">rollup-plugin-friendly-type-imports</a>. However, this approach is not officially supported by Vite.</p><h3 id="client-types" tabindex="-1">Client Types <a class="header-anchor" href="#client-types" aria-hidden="true">#</a></h3><p>Vite&#39;s default types are for its Node.js API. To shim the environment of client side code in a Vite application, add a <code>d.ts</code> declaration file:</p><div class="language-typescript"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/// </span><span style="color:#89DDFF;font-style:italic;">&lt;</span><span style="color:#F07178;font-style:italic;">reference</span><span style="color:#89DDFF;font-style:italic;"> </span><span style="color:#C792EA;font-style:italic;">types</span><span style="color:#89DDFF;font-style:italic;">=</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#C3E88D;font-style:italic;">vite/client</span><span style="color:#89DDFF;font-style:italic;">&quot;</span><span style="color:#89DDFF;font-style:italic;"> /&gt;</span></span>
<span class="line"></span></code></pre></div><p>Also, you can add <code>vite/client</code> to <code>compilerOptions.types</code> of your <code>tsconfig</code>:</p><div class="language-json"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">compilerOptions</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">[</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">vite/client</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>This will provide the following type shims:</p><ul><li>Asset imports (e.g. importing an <code>.svg</code> file)</li><li>Types for the Vite-injected <a href="./env-and-mode.html#env-variables">env variables</a> on <code>import.<wbr>meta.env</code></li><li>Types for the <a href="./api-hmr.html">HMR API</a> on <code>import.<wbr>meta.hot</code></li></ul><h2 id="vue" tabindex="-1">Vue <a class="header-anchor" href="#vue" aria-hidden="true">#</a></h2><p>Vite provides first-class Vue support:</p><ul><li>Vue 3 SFC support via <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-vue" target="_blank" rel="noopener noreferrer">@vitejs/plugin-vue</a></li><li>Vue 3 JSX support via <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-vue-jsx" target="_blank" rel="noopener noreferrer">@vitejs/plugin-vue-jsx</a></li><li>Vue 2 support via <a href="https://github.com/underfin/vite-plugin-vue2" target="_blank" rel="noopener noreferrer">underfin/vite-plugin-vue2</a></li></ul><h2 id="jsx" tabindex="-1">JSX <a class="header-anchor" href="#jsx" aria-hidden="true">#</a></h2><p><code>.jsx</code> and <code>.tsx</code> files are also supported out of the box. JSX transpilation is also handled via <a href="https://esbuild.github.io" target="_blank" rel="noopener noreferrer">esbuild</a>, and defaults to the React 16 flavor. React 17 style JSX support in esbuild is tracked <a href="https://github.com/evanw/esbuild/issues/334" target="_blank" rel="noopener noreferrer">here</a>.</p><p>Vue users should use the official <a href="https://github.com/vitejs/vite/tree/main/packages/plugin-vue-jsx" target="_blank" rel="noopener noreferrer">@vitejs/plugin-vue-jsx</a> plugin, which provides Vue 3 specific features including HMR, global component resolving, directives and slots.</p><p>If not using JSX with React or Vue, custom <code>jsxFactory</code> and <code>jsxFragment</code> can be configured using the <a href="/config/shared-options.html#esbuild"><code>esbuild</code> option</a>. For example for Preact:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">esbuild</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxFactory</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">h</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxFragment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Fragment</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>More details in <a href="https://esbuild.github.io/content-types/#jsx" target="_blank" rel="noopener noreferrer">esbuild docs</a>.</p><p>You can inject the JSX helpers using <code>jsxInject</code> (which is a Vite-only option) to avoid manual imports:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite.config.js</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">esbuild</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxInject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">import React from &#39;react&#39;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="css" tabindex="-1">CSS <a class="header-anchor" href="#css" aria-hidden="true">#</a></h2><p>Importing <code>.css</code> files will inject its content to the page via a <code>&lt;style&gt;</code> tag with HMR support. You can also retrieve the processed CSS as a string as the module&#39;s default export.</p><h3 id="import-inlining-and-rebasing" tabindex="-1"><code>@import</code> Inlining and Rebasing <a class="header-anchor" href="#import-inlining-and-rebasing" aria-hidden="true">#</a></h3><p>Vite is pre-configured to support CSS <code>@import</code> inlining via <code>postcss-import</code>. Vite aliases are also respected for CSS <code>@import</code>. In addition, all CSS <code>url()</code> references, even if the imported files are in different directories, are always automatically rebased to ensure correctness.</p><p><code>@import</code> aliases and URL rebasing are also supported for Sass and Less files (see <a href="#css-pre-processors">CSS Pre-processors</a>).</p><h3 id="postcss" tabindex="-1">PostCSS <a class="header-anchor" href="#postcss" aria-hidden="true">#</a></h3><p>If the project contains valid PostCSS config (any format supported by <a href="https://github.com/postcss/postcss-load-config" target="_blank" rel="noopener noreferrer">postcss-load-config</a>, e.g. <code>postcss.config.js</code>), it will be automatically applied to all imported CSS.</p><h3 id="css-modules" tabindex="-1">CSS Modules <a class="header-anchor" href="#css-modules" aria-hidden="true">#</a></h3><p>Any CSS file ending with <code>.module.css</code> is considered a <a href="https://github.com/css-modules/css-modules" target="_blank" rel="noopener noreferrer">CSS modules file</a>. Importing such a file will return the corresponding module object:</p><div class="language-css"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">/* example.module.css */</span></span>
<span class="line"><span style="color:#89DDFF;">.</span><span style="color:#FFCB6B;">red</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#B2CCD6;">color</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> red</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> classes </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.module.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> classes</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">red</span></span>
<span class="line"></span></code></pre></div><p>CSS modules behavior can be configured via the <a href="/config/shared-options.html#css-modules"><code>css.modules</code> option</a>.</p><p>If <code>css.modules.localsConvention</code> is set to enable camelCase locals (e.g. <code>localsConvention: &#39;camelCaseOnly&#39;</code>), you can also use named imports:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// .apply-color -&gt; applyColor</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">applyColor</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.module.css</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">foo</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">className </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> applyColor</span></span>
<span class="line"></span></code></pre></div><h3 id="css-pre-processors" tabindex="-1">CSS Pre-processors <a class="header-anchor" href="#css-pre-processors" aria-hidden="true">#</a></h3><p>Because Vite targets modern browsers only, it is recommended to use native CSS variables with PostCSS plugins that implement CSSWG drafts (e.g. <a href="https://github.com/csstools/postcss-plugins/tree/main/plugins/postcss-nesting" target="_blank" rel="noopener noreferrer">postcss-nesting</a>) and author plain, future-standards-compliant CSS.</p><p>That said, Vite does provide built-in support for <code>.scss</code>, <code>.sass</code>, <code>.less</code>, <code>.styl</code> and <code>.stylus</code> files. There is no need to install Vite-specific plugins for them, but the corresponding pre-processor itself must be installed:</p><div class="language-bash"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;"># .scss and .sass</span></span>
<span class="line"><span style="color:#A6ACCD;">npm add -D sass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># .less</span></span>
<span class="line"><span style="color:#A6ACCD;">npm add -D less</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;"># .styl and .stylus</span></span>
<span class="line"><span style="color:#A6ACCD;">npm add -D stylus</span></span>
<span class="line"></span></code></pre></div><p>If using Vue single file components, this also automatically enables <code>&lt;style lang=&quot;sass&quot;&gt;</code> et al.</p><p>Vite improves <code>@import</code> resolving for Sass and Less so that Vite aliases are also respected. In addition, relative <code>url()</code> references inside imported Sass/Less files that are in different directories from the root file are also automatically rebased to ensure correctness.</p><p><code>@import</code> alias and url rebasing are not supported for Stylus due to its API constraints.</p><p>You can also use CSS modules combined with pre-processors by prepending <code>.module</code> to the file extension, for example <code>style.module.scss</code>.</p><h3 id="disabling-css-injection-into-the-page" tabindex="-1">Disabling CSS injection into the page <a class="header-anchor" href="#disabling-css-injection-into-the-page" aria-hidden="true">#</a></h3><p>The automatic injection of CSS contents can be turned off via the <code>?inline</code> query parameter. In this case, the processed CSS string is returned as the module&#39;s default export as usual, but the styles aren&#39;t injected to the page.</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> styles </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./foo.css</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// will be injected into the page</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> otherStyles </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./bar.css?inline</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// will not be injected into the page</span></span>
<span class="line"></span></code></pre></div><h2 id="static-assets" tabindex="-1">Static Assets <a class="header-anchor" href="#static-assets" aria-hidden="true">#</a></h2><p>Importing a static asset will return the resolved public URL when it is served:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> imgUrl </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./img.png</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">getElementById</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">hero-img</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> imgUrl</span></span>
<span class="line"></span></code></pre></div><p>Special queries can modify how assets are loaded:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Explicitly load assets as URL</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> assetAsURL </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./asset.js?url</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Load assets as strings</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> assetAsString </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./shader.glsl?raw</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Load Web Workers</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> Worker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker.js?worker</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// Web Workers inlined as base64 strings at build time</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> InlineWorker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker.js?worker&amp;inline</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>More details in <a href="./assets.html">Static Asset Handling</a>.</p><h2 id="json" tabindex="-1">JSON <a class="header-anchor" href="#json" aria-hidden="true">#</a></h2><p>JSON files can be directly imported - named imports are also supported:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// import the entire object</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> json </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.json</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// import a root field as named exports - helps with tree-shaking!</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">field</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.json</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><h2 id="glob-import" tabindex="-1">Glob Import <a class="header-anchor" href="#glob-import" aria-hidden="true">#</a></h2><p>Vite supports importing multiple modules from the file system via the special <code>import.<wbr>meta.glob</code> function:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>The above will be transformed into the following:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// code produced by vite</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>You can then iterate over the keys of the <code>modules</code> object to access the corresponding modules:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">for</span><span style="color:#A6ACCD;"> (</span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">in</span><span style="color:#A6ACCD;"> modules) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">modules</span><span style="color:#F07178;">[</span><span style="color:#A6ACCD;">path</span><span style="color:#F07178;">]()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">mod</span><span style="color:#89DDFF;">)</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">path</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">mod</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Matched files are by default lazy-loaded via dynamic import and will be split into separate chunks during build. If you&#39;d rather import all the modules directly (e.g. relying on side-effects in these modules to be applied first), you can pass <code>{ eager: true }</code> as the second argument:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">eager</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>The above will be transformed into the following:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// code produced by vite</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> __glob__0_0 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">*</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#A6ACCD;"> __glob__0_1 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="glob-import-as" tabindex="-1">Glob Import As <a class="header-anchor" href="#glob-import-as" aria-hidden="true">#</a></h3><p><code>import.<wbr>meta.glob</code> also supports importing files as strings (similar to <a href="https://vitejs.dev/guide/assets.html#importing-asset-as-string" target="_blank" rel="noopener noreferrer">Importing Asset as String</a>) with the <a href="https://github.com/tc39/proposal-import-reflection" target="_blank" rel="noopener noreferrer">Import Reflection</a> syntax:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">as</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">raw</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>The above will be transformed into the following:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// code produced by vite</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">export default &quot;foo&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">export default &quot;bar&quot;</span><span style="color:#A6ACCD;">\\n</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p><code>{ as: &#39;url&#39; }</code> is also supported for loading assets as URLs.</p><h3 id="multiple-patterns" tabindex="-1">Multiple Patterns <a class="header-anchor" href="#multiple-patterns" aria-hidden="true">#</a></h3><p>The first argument can be an array of globs, for example</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./another/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span></code></pre></div><h3 id="negative-patterns" tabindex="-1">Negative Patterns <a class="header-anchor" href="#negative-patterns" aria-hidden="true">#</a></h3><p>Negative glob patterns are also supported (prefixed with <code>!</code>). To ignore some files from the result, you can add exclude glob patterns to the first argument:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">([</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">!**/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">])</span></span>
<span class="line"></span></code></pre></div><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// code produced by vite</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="named-imports" tabindex="-1">Named Imports <a class="header-anchor" href="#named-imports" aria-hidden="true">#</a></h4><p>It&#39;s possible to only import parts of the modules with the <code>import</code> options.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">import</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setup</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// code produced by vite</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setup)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setup)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>When combined with <code>eager</code> it&#39;s even possible to have tree-shaking enabled for those modules.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">import</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">setup</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">eager</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// code produced by vite:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setup</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__glob__0_0</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setup</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">as</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">__glob__0_1</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Set <code>import</code> to <code>default</code> to import the default export.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">import</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">eager</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// code produced by vite:</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> __glob__0_0 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> __glob__0_1 </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_0</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> __glob__0_1</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h4 id="custom-queries" tabindex="-1">Custom Queries <a class="header-anchor" href="#custom-queries" aria-hidden="true">#</a></h4><p>You can also use the <code>query</code> option to provide custom queries to imports for other plugins to consume.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">glob</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/*.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">query</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">foo</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">bar</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">bar</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// code produced by vite:</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> modules </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/foo.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/foo.js?foo=bar&amp;bar=true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setup)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">./dir/bar.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./dir/bar.js?foo=bar&amp;bar=true</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">m</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> m</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">setup)</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><h3 id="glob-import-caveats" tabindex="-1">Glob Import Caveats <a class="header-anchor" href="#glob-import-caveats" aria-hidden="true">#</a></h3><p>Note that:</p><ul><li>This is a Vite-only feature and is not a web or ES standard.</li><li>The glob patterns are treated like import specifiers: they must be either relative (start with <code>./</code>) or absolute (start with <code>/</code>, resolved relative to project root) or an alias path (see <a href="/config/shared-options.html#resolve-alias"><code>resolve.alias</code> option</a>).</li><li>The glob matching is done via <a href="https://github.com/mrmlnc/fast-glob" target="_blank" rel="noopener noreferrer"><code>fast-glob</code></a> - check out its documentation for <a href="https://github.com/mrmlnc/fast-glob#pattern-syntax" target="_blank" rel="noopener noreferrer">supported glob patterns</a>.</li><li>You should also be aware that all the arguments in the <code>import.<wbr>meta.glob</code> must be <strong>passed as literals</strong>. You can NOT use variables or expressions in them.</li></ul><h2 id="dynamic-import" tabindex="-1">Dynamic Import <a class="header-anchor" href="#dynamic-import" aria-hidden="true">#</a></h2><p>Similar to <a href="#glob-import">glob import</a>, Vite also supports dynamic import with variables.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> module </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">import</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">./dir/</span><span style="color:#89DDFF;">\${</span><span style="color:#A6ACCD;">file</span><span style="color:#89DDFF;">}</span><span style="color:#C3E88D;">.js</span><span style="color:#89DDFF;">\`</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>Note that variables only represent file names one level deep. If <code>file</code> is <code>&#39;foo/bar&#39;</code>, the import would fail. For more advanced usage, you can use the <a href="#glob-import">glob import</a> feature.</p><h2 id="webassembly" tabindex="-1">WebAssembly <a class="header-anchor" href="#webassembly" aria-hidden="true">#</a></h2><p>Pre-compiled <code>.wasm</code> files can be imported with <code>?init</code> - the default export will be an initialization function that returns a Promise of the wasm instance:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> init </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./example.wasm?init</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">instance</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">exports</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">test</span><span style="color:#F07178;">()</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>The init function can also take the <code>imports</code> object which is passed along to <code>WebAssembly.instantiate</code> as its second argument:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#82AAFF;">init</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">imports</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">someFunc</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#676E95;font-style:italic;">/* ... */</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#676E95;font-style:italic;">/* ... */</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>In the production build, <code>.wasm</code> files smaller than <code>assetInlineLimit</code> will be inlined as base64 strings. Otherwise, they will be copied to the dist directory as an asset and fetched on-demand.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p><a href="https://github.com/WebAssembly/esm-integration" target="_blank" rel="noopener noreferrer">ES Module Integration Proposal for WebAssembly</a> is not currently supported. Use <a href="https://github.com/Menci/vite-plugin-wasm" target="_blank" rel="noopener noreferrer"><code>vite-plugin-wasm</code></a> or other community plugins to handle this.</p></div><h2 id="web-workers" tabindex="-1">Web Workers <a class="header-anchor" href="#web-workers" aria-hidden="true">#</a></h2><h3 id="import-with-constructors" tabindex="-1">Import with Constructors <a class="header-anchor" href="#import-with-constructors" aria-hidden="true">#</a></h3><p>A web worker script can be imported using <a href="https://developer.mozilla.org/en-US/docs/Web/API/Worker/Worker" target="_blank" rel="noopener noreferrer"><code>new Worker()</code></a> and <a href="https://developer.mozilla.org/en-US/docs/Web/API/SharedWorker/SharedWorker" target="_blank" rel="noopener noreferrer"><code>new SharedWorker()</code></a>. Compared to the worker suffixes, this syntax leans closer to the standards and is the <strong>recommended</strong> way to create workers.</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url))</span></span>
<span class="line"></span></code></pre></div><p>The worker constructor also accepts options, which can be used to create &quot;module&quot; workers:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">Worker</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">URL</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker.js</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">meta</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">url)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h3 id="import-with-query-suffixes" tabindex="-1">Import with Query Suffixes <a class="header-anchor" href="#import-with-query-suffixes" aria-hidden="true">#</a></h3><p>A web worker script can be directly imported by appending <code>?worker</code> or <code>?sharedworker</code> to the import request. The default export will be a custom worker constructor:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyWorker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker?worker</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> worker </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">MyWorker</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"></span></code></pre></div><p>The worker script can also use <code>import</code> statements instead of <code>importScripts()</code> - note during dev this relies on browser native support and currently only works in Chrome, but for the production build it is compiled away.</p><p>By default, the worker script will be emitted as a separate chunk in the production build. If you wish to inline the worker as base64 strings, add the <code>inline</code> query:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyWorker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker?worker&amp;inline</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>If you wish to retrieve the worker as a URL, add the <code>url</code> query:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> MyWorker </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">./worker?worker&amp;url</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>See <a href="/config/worker-options.html">Worker Options</a> for details on configuring the bundling of all workers.</p><h2 id="build-optimizations" tabindex="-1">Build Optimizations <a class="header-anchor" href="#build-optimizations" aria-hidden="true">#</a></h2><blockquote><p>Features listed below are automatically applied as part of the build process and there is no need for explicit configuration unless you want to disable them.</p></blockquote><h3 id="css-code-splitting" tabindex="-1">CSS Code Splitting <a class="header-anchor" href="#css-code-splitting" aria-hidden="true">#</a></h3><p>Vite automatically extracts the CSS used by modules in an async chunk and generates a separate file for it. The CSS file is automatically loaded via a <code>&lt;link&gt;</code> tag when the associated async chunk is loaded, and the async chunk is guaranteed to only be evaluated after the CSS is loaded to avoid <a href="https://en.wikipedia.org/wiki/Flash_of_unstyled_content#:~:text=A%20flash%20of%20unstyled%20content,before%20all%20information%20is%20retrieved." target="_blank" rel="noopener noreferrer">FOUC</a>.</p><p>If you&#39;d rather have all the CSS extracted into a single file, you can disable CSS code splitting by setting <a href="/config/build-options.html#build-csscodesplit"><code>build.cssCodeSplit</code></a> to <code>false</code>.</p><h3 id="preload-directives-generation" tabindex="-1">Preload Directives Generation <a class="header-anchor" href="#preload-directives-generation" aria-hidden="true">#</a></h3><p>Vite automatically generates <code>&lt;link rel=&quot;modulepreload&quot;&gt;</code> directives for entry chunks and their direct imports in the built HTML.</p><h3 id="async-chunk-loading-optimization" tabindex="-1">Async Chunk Loading Optimization <a class="header-anchor" href="#async-chunk-loading-optimization" aria-hidden="true">#</a></h3><p>In real world applications, Rollup often generates &quot;common&quot; chunks - code that is shared between two or more other chunks. Combined with dynamic imports, it is quite common to have the following scenario:</p><p><img src="`+o+`" alt="graph"></p><p>In the non-optimized scenarios, when async chunk <code>A</code> is imported, the browser will have to request and parse <code>A</code> before it can figure out that it also needs the common chunk <code>C</code>. This results in an extra network roundtrip:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">Entry ---&gt; A ---&gt; C</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>Vite automatically rewrites code-split dynamic import calls with a preload step so that when <code>A</code> is requested, <code>C</code> is fetched <strong>in parallel</strong>:</p><div class="language-"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">Entry ---&gt; (A + C)</span></span>
<span class="line"><span style="color:#A6ACCD;"></span></span></code></pre></div><p>It is possible for <code>C</code> to have further imports, which will result in even more roundtrips in the un-optimized scenario. Vite&#39;s optimization will trace all the direct imports to completely eliminate the roundtrips regardless of import depth.</p>`,171),t=[p];function r(c,i,y,D,d,F){return n(),a("div",null,t)}var u=s(l,[["render",r]]);export{A as __pageData,u as default};
