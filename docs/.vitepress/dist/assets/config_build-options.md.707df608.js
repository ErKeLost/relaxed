import{_ as e,c as i,o,a as t}from"./app.1478ba28.js";const g=JSON.parse('{"title":"Build Options","description":"","frontmatter":{},"headers":[{"level":2,"title":"build.target","slug":"build-target"},{"level":2,"title":"build.polyfillModulePreload","slug":"build-polyfillmodulepreload"},{"level":2,"title":"build.outDir","slug":"build-outdir"},{"level":2,"title":"build.assetsDir","slug":"build-assetsdir"},{"level":2,"title":"build.assetsInlineLimit","slug":"build-assetsinlinelimit"},{"level":2,"title":"build.cssCodeSplit","slug":"build-csscodesplit"},{"level":2,"title":"build.cssTarget","slug":"build-csstarget"},{"level":2,"title":"build.sourcemap","slug":"build-sourcemap"},{"level":2,"title":"build.rollupOptions","slug":"build-rollupoptions"},{"level":2,"title":"build.commonjsOptions","slug":"build-commonjsoptions"},{"level":2,"title":"build.dynamicImportVarsOptions","slug":"build-dynamicimportvarsoptions"},{"level":2,"title":"build.lib","slug":"build-lib"},{"level":2,"title":"build.manifest","slug":"build-manifest"},{"level":2,"title":"build.ssrManifest","slug":"build-ssrmanifest"},{"level":2,"title":"build.ssr","slug":"build-ssr"},{"level":2,"title":"build.minify","slug":"build-minify"},{"level":2,"title":"build.terserOptions","slug":"build-terseroptions"},{"level":2,"title":"build.write","slug":"build-write"},{"level":2,"title":"build.emptyOutDir","slug":"build-emptyoutdir"},{"level":2,"title":"build.reportCompressedSize","slug":"build-reportcompressedsize"},{"level":2,"title":"build.chunkSizeWarningLimit","slug":"build-chunksizewarninglimit"},{"level":2,"title":"build.watch","slug":"build-watch"}],"relativePath":"config/build-options.md"}'),l={name:"config/build-options.md"},r=t(`<h1 id="build-options" tabindex="-1">Build Options <a class="header-anchor" href="#build-options" aria-hidden="true">#</a></h1><h2 id="build-target" tabindex="-1">build.target <a class="header-anchor" href="#build-target" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string | string[]</code></li><li><strong>Default:</strong> <code>&#39;modules&#39;</code></li><li><strong>Related:</strong> <a href="/guide/build.html#browser-compatibility">Browser Compatibility</a></li></ul><p>Browser compatibility target for the final bundle. The default value is a Vite special value, <code>&#39;modules&#39;</code>, which targets browsers with <a href="https://caniuse.com/es6-module" target="_blank" rel="noopener noreferrer">native ES Modules</a> and <a href="https://caniuse.com/es6-module-dynamic-import" target="_blank" rel="noopener noreferrer">native ESM dynamic import</a> support.</p><p>Another special value is <code>&#39;esnext&#39;</code> - which assumes native dynamic imports support and will transpile as little as possible:</p><ul><li>If the <a href="#build-minify"><code>build.minify</code></a> option is <code>&#39;terser&#39;</code>, <code>&#39;esnext&#39;</code> will be forced down to <code>&#39;es2021&#39;</code>.</li><li>In other cases, it will perform no transpilation at all.</li></ul><p>The transform is performed with esbuild and the value should be a valid <a href="https://esbuild.github.io/api/#target" target="_blank" rel="noopener noreferrer">esbuild target option</a>. Custom targets can either be a ES version (e.g. <code>es2015</code>), a browser with version (e.g. <code>chrome58</code>), or an array of multiple target strings.</p><p>Note the build will fail if the code contains features that cannot be safely transpiled by esbuild. See <a href="https://esbuild.github.io/content-types/#javascript" target="_blank" rel="noopener noreferrer">esbuild docs</a> for more details.</p><h2 id="build-polyfillmodulepreload" tabindex="-1">build.polyfillModulePreload <a class="header-anchor" href="#build-polyfillmodulepreload" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Whether to automatically inject <a href="https://guybedford.com/es-module-preloading-integrity#modulepreload-polyfill" target="_blank" rel="noopener noreferrer">module preload polyfill</a>.</p><p>If set to <code>true</code>, the polyfill is auto injected into the proxy module of each <code>index.html</code> entry. If the build is configured to use a non-html custom entry via <code>build.rollupOptions.input</code>, then it is necessary to manually import the polyfill in your custom entry:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">vite/modulepreload-polyfill</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"></span></code></pre></div><p>Note: the polyfill does <strong>not</strong> apply to <a href="/guide/build.html#library-mode">Library Mode</a>. If you need to support browsers without native dynamic import, you should probably avoid using it in your library.</p><h2 id="build-outdir" tabindex="-1">build.outDir <a class="header-anchor" href="#build-outdir" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>dist</code></li></ul><p>Specify the output directory (relative to <a href="/guide/#index-html-and-project-root">project root</a>).</p><h2 id="build-assetsdir" tabindex="-1">build.assetsDir <a class="header-anchor" href="#build-assetsdir" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>assets</code></li></ul><p>Specify the directory to nest generated assets under (relative to <code>build.outDir</code>).</p><h2 id="build-assetsinlinelimit" tabindex="-1">build.assetsInlineLimit <a class="header-anchor" href="#build-assetsinlinelimit" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <code>4096</code> (4kb)</li></ul><p>Imported or referenced assets that are smaller than this threshold will be inlined as base64 URLs to avoid extra http requests. Set to <code>0</code> to disable inlining altogether.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>If you specify <code>build.lib</code>, <code>build.assetsInlineLimit</code> will be ignored and assets will always be inlined, regardless of file size.</p></div><h2 id="build-csscodesplit" tabindex="-1">build.cssCodeSplit <a class="header-anchor" href="#build-csscodesplit" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Enable/disable CSS code splitting. When enabled, CSS imported in async chunks will be inlined into the async chunk itself and inserted when the chunk is loaded.</p><p>If disabled, all CSS in the entire project will be extracted into a single CSS file.</p><div class="tip custom-block"><p class="custom-block-title">Note</p><p>If you specify <code>build.lib</code>, <code>build.cssCodeSplit</code> will be <code>false</code> as default.</p></div><h2 id="build-csstarget" tabindex="-1">build.cssTarget <a class="header-anchor" href="#build-csstarget" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string | string[]</code></li><li><strong>Default:</strong> the same as <a href="#build-target"><code>build.target</code></a></li></ul><p>This options allows users to set a different browser target for CSS minification from the one used for JavaScript transpilation.</p><p>It should only be used when you are targeting a non-mainstream browser. One example is Android WeChat WebView, which supports most modern JavaScript features but not the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/color_value#rgb_colors" target="_blank" rel="noopener noreferrer"><code>#RGBA</code> hexadecimal color notation in CSS</a>. In this case, you need to set <code>build.cssTarget</code> to <code>chrome61</code> to prevent vite from transform <code>rgba()</code> colors into <code>#RGBA</code> hexadecimal notations.</p><h2 id="build-sourcemap" tabindex="-1">build.sourcemap <a class="header-anchor" href="#build-sourcemap" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean | &#39;inline&#39; | &#39;hidden&#39;</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Generate production source maps. If <code>true</code>, a separate sourcemap file will be created. If <code>&#39;inline&#39;</code>, the sourcemap will be appended to the resulting output file as a data URI. <code>&#39;hidden&#39;</code> works like <code>true</code> except that the corresponding sourcemap comments in the bundled files are suppressed.</p><h2 id="build-rollupoptions" tabindex="-1">build.rollupOptions <a class="header-anchor" href="#build-rollupoptions" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <a href="https://rollupjs.org/guide/en/#big-list-of-options" target="_blank" rel="noopener noreferrer"><code>RollupOptions</code></a></li></ul><p>Directly customize the underlying Rollup bundle. This is the same as options that can be exported from a Rollup config file and will be merged with Vite&#39;s internal Rollup options. See <a href="https://rollupjs.org/guide/en/#big-list-of-options" target="_blank" rel="noopener noreferrer">Rollup options docs</a> for more details.</p><h2 id="build-commonjsoptions" tabindex="-1">build.commonjsOptions <a class="header-anchor" href="#build-commonjsoptions" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs#options" target="_blank" rel="noopener noreferrer"><code>RollupCommonJSOptions</code></a></li></ul><p>Options to pass on to <a href="https://github.com/rollup/plugins/tree/master/packages/commonjs" target="_blank" rel="noopener noreferrer">@rollup/plugin-commonjs</a>.</p><h2 id="build-dynamicimportvarsoptions" tabindex="-1">build.dynamicImportVarsOptions <a class="header-anchor" href="#build-dynamicimportvarsoptions" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <a href="https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars#options" target="_blank" rel="noopener noreferrer"><code>RollupDynamicImportVarsOptions</code></a></li><li><strong>Related:</strong> <a href="/guide/features.html#dynamic-import">Dynamic Import</a></li></ul><p>Options to pass on to <a href="https://github.com/rollup/plugins/tree/master/packages/dynamic-import-vars" target="_blank" rel="noopener noreferrer">@rollup/plugin-dynamic-import-vars</a>.</p><h2 id="build-lib" tabindex="-1">build.lib <a class="header-anchor" href="#build-lib" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>{ entry: string, name?: string, formats?: (&#39;es&#39; | &#39;cjs&#39; | &#39;umd&#39; | &#39;iife&#39;)[], fileName?: string | ((format: ModuleFormat) =&gt; string) }</code></li><li><strong>Related:</strong> <a href="/guide/build.html#library-mode">Library Mode</a></li></ul><p>Build as a library. <code>entry</code> is required since the library cannot use HTML as entry. <code>name</code> is the exposed global variable and is required when <code>formats</code> includes <code>&#39;umd&#39;</code> or <code>&#39;iife&#39;</code>. Default <code>formats</code> are <code>[&#39;es&#39;, &#39;umd&#39;]</code>. <code>fileName</code> is the name of the package file output, default <code>fileName</code> is the name option of package.json, it can also be defined as function taking the <code>format</code> as an argument.</p><h2 id="build-manifest" tabindex="-1">build.manifest <a class="header-anchor" href="#build-manifest" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean | string</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Related:</strong> <a href="/guide/backend-integration.html">Backend Integration</a></li></ul><p>When set to <code>true</code>, the build will also generate a <code>manifest.json</code> file that contains a mapping of non-hashed asset filenames to their hashed versions, which can then be used by a server framework to render the correct asset links. When the value is a string, it will be used as the manifest file name.</p><h2 id="build-ssrmanifest" tabindex="-1">build.ssrManifest <a class="header-anchor" href="#build-ssrmanifest" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean | string</code></li><li><strong>Default:</strong> <code>false</code></li><li><strong>Related:</strong> <a href="/guide/ssr.html">Server-Side Rendering</a></li></ul><p>When set to <code>true</code>, the build will also generate a SSR manifest for determining style links and asset preload directives in production. When the value is a string, it will be used as the manifest file name.</p><h2 id="build-ssr" tabindex="-1">build.ssr <a class="header-anchor" href="#build-ssr" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean | string</code></li><li><strong>Default:</strong> <code>undefined</code></li><li><strong>Related:</strong> <a href="/guide/ssr.html">Server-Side Rendering</a></li></ul><p>Produce SSR-oriented build. The value can be a string to directly specify the SSR entry, or <code>true</code>, which requires specifying the SSR entry via <code>rollupOptions.input</code>.</p><h2 id="build-minify" tabindex="-1">build.minify <a class="header-anchor" href="#build-minify" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean | &#39;terser&#39; | &#39;esbuild&#39;</code></li><li><strong>Default:</strong> <code>&#39;esbuild&#39;</code></li></ul><p>Set to <code>false</code> to disable minification, or specify the minifier to use. The default is <a href="https://github.com/evanw/esbuild" target="_blank" rel="noopener noreferrer">esbuild</a> which is 20 ~ 40x faster than terser and only 1 ~ 2% worse compression. <a href="https://github.com/privatenumber/minification-benchmarks" target="_blank" rel="noopener noreferrer">Benchmarks</a></p><p>Note the <code>build.minify</code> option does not minify whitespaces when using the <code>&#39;es&#39;</code> format in lib mode, as it removes pure annotations and break tree-shaking.</p><p>Terser must be installed when it is set to <code>&#39;terser&#39;</code>.</p><div class="language-sh"><span class="copy"></span><pre><code><span class="line"><span style="color:#A6ACCD;">npm add -D terser</span></span>
<span class="line"></span></code></pre></div><h2 id="build-terseroptions" tabindex="-1">build.terserOptions <a class="header-anchor" href="#build-terseroptions" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>TerserOptions</code></li></ul><p>Additional <a href="https://terser.org/docs/api-reference#minify-options" target="_blank" rel="noopener noreferrer">minify options</a> to pass on to Terser.</p><h2 id="build-write" tabindex="-1">build.write <a class="header-anchor" href="#build-write" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Set to <code>false</code> to disable writing the bundle to disk. This is mostly used in <a href="/guide/api-javascript.html#build">programmatic <code>build()</code> calls</a> where further post processing of the bundle is needed before writing to disk.</p><h2 id="build-emptyoutdir" tabindex="-1">build.emptyOutDir <a class="header-anchor" href="#build-emptyoutdir" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code> if <code>outDir</code> is inside <code>root</code></li></ul><p>By default, Vite will empty the <code>outDir</code> on build if it is inside project root. It will emit a warning if <code>outDir</code> is outside of root to avoid accidentally removing important files. You can explicitly set this option to suppress the warning. This is also available via command line as <code>--emptyOutDir</code>.</p><h2 id="build-reportcompressedsize" tabindex="-1">build.reportCompressedSize <a class="header-anchor" href="#build-reportcompressedsize" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Enable/disable gzip-compressed size reporting. Compressing large output files can be slow, so disabling this may increase build performance for large projects.</p><h2 id="build-chunksizewarninglimit" tabindex="-1">build.chunkSizeWarningLimit <a class="header-anchor" href="#build-chunksizewarninglimit" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>number</code></li><li><strong>Default:</strong> <code>500</code></li></ul><p>Limit for chunk size warnings (in kbs).</p><h2 id="build-watch" tabindex="-1">build.watch <a class="header-anchor" href="#build-watch" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <a href="https://rollupjs.org/guide/en/#watch-options" target="_blank" rel="noopener noreferrer"><code>WatcherOptions</code></a><code>| null</code></li><li><strong>Default:</strong> <code>null</code></li></ul><p>Set to <code>{}</code> to enable rollup watcher. This is mostly used in cases that involve build-only plugins or integrations processes.</p>`,81),s=[r];function a(n,d,u,c,p,h){return o(),i("div",null,s)}var m=e(l,[["render",a]]);export{g as __pageData,m as default};
