import{_ as e,c as o,o as i,a as s}from"./app.1478ba28.js";const g=JSON.parse('{"title":"Dep Optimization Options","description":"","frontmatter":{},"headers":[{"level":2,"title":"optimizeDeps.entries","slug":"optimizedeps-entries"},{"level":2,"title":"optimizeDeps.exclude","slug":"optimizedeps-exclude"},{"level":2,"title":"optimizeDeps.include","slug":"optimizedeps-include"},{"level":2,"title":"optimizeDeps.esbuildOptions","slug":"optimizedeps-esbuildoptions"},{"level":2,"title":"optimizeDeps.force","slug":"optimizedeps-force"}],"relativePath":"config/dep-optimization-options.md"}'),t={name:"config/dep-optimization-options.md"},n=s(`<h1 id="dep-optimization-options" tabindex="-1">Dep Optimization Options <a class="header-anchor" href="#dep-optimization-options" aria-hidden="true">#</a></h1><ul><li><strong>Related:</strong> <a href="/guide/dep-pre-bundling.html">Dependency Pre-Bundling</a></li></ul><h2 id="optimizedeps-entries" tabindex="-1">optimizeDeps.entries <a class="header-anchor" href="#optimizedeps-entries" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string | string[]</code></li></ul><p>By default, Vite will crawl all your <code>.html</code> files to detect dependencies that need to be pre-bundled (ignoring <code>node_modules</code>, <code>build.outDir</code>, <code>__tests__</code> and <code>coverage</code>). If <code>build.rollupOptions.input</code> is specified, Vite will crawl those entry points instead.</p><p>If neither of these fit your needs, you can specify custom entries using this option - the value should be a <a href="https://github.com/mrmlnc/fast-glob#basic-syntax" target="_blank" rel="noopener noreferrer">fast-glob pattern</a> or array of patterns that are relative from Vite project root. This will overwrite default entries inference. Only <code>node_modules</code> and <code>build.outDir</code> folders will be ignored by default when <code>optimizeDeps.entries</code> is explicitly defined. If other folders needs to be ignored, you can use an ignore pattern as part of the entries list, marked with an initial <code>!</code>.</p><h2 id="optimizedeps-exclude" tabindex="-1">optimizeDeps.exclude <a class="header-anchor" href="#optimizedeps-exclude" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>Dependencies to exclude from pre-bundling.</p><div class="warning custom-block"><p class="custom-block-title">CommonJS</p><p>CommonJS dependencies should not be excluded from optimization. If an ESM dependency is excluded from optimization, but has a nested CommonJS dependency, the CommonJS dependency should be added to <code>optimizeDeps.include</code>. Example:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">optimizeDeps</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">include</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">esm-dep &gt; cjs-dep</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div></div><h2 id="optimizedeps-include" tabindex="-1">optimizeDeps.include <a class="header-anchor" href="#optimizedeps-include" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>By default, linked packages not inside <code>node_modules</code> are not pre-bundled. Use this option to force a linked package to be pre-bundled.</p><h2 id="optimizedeps-esbuildoptions" tabindex="-1">optimizeDeps.esbuildOptions <a class="header-anchor" href="#optimizedeps-esbuildoptions" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <a href="https://esbuild.github.io/api/#simple-options" target="_blank" rel="noopener noreferrer"><code>EsbuildBuildOptions</code></a></li></ul><p>Options to pass to esbuild during the dep scanning and optimization.</p><p>Certain options are omitted since changing them would not be compatible with Vite&#39;s dep optimization.</p><ul><li><code>external</code> is also omitted, use Vite&#39;s <code>optimizeDeps.exclude</code> option</li><li><code>plugins</code> are merged with Vite&#39;s dep plugin</li></ul><h2 id="optimizedeps-force" tabindex="-1">optimizeDeps.force <a class="header-anchor" href="#optimizedeps-force" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li></ul><p>Set to <code>true</code> to force dependency pre-bundling, ignoring previously cached optimized dependencies.</p>`,21),p=[n];function a(l,d,r,c,u,m){return i(),o("div",null,p)}var f=e(t,[["render",a]]);export{g as __pageData,f as default};
