import{_ as e,c as s,o,a}from"./app.1478ba28.js";const D=JSON.parse('{"title":"Shared Options","description":"","frontmatter":{},"headers":[{"level":2,"title":"root","slug":"root"},{"level":2,"title":"base","slug":"base"},{"level":2,"title":"mode","slug":"mode"},{"level":2,"title":"define","slug":"define"},{"level":2,"title":"plugins","slug":"plugins"},{"level":2,"title":"publicDir","slug":"publicdir"},{"level":2,"title":"cacheDir","slug":"cachedir"},{"level":2,"title":"resolve.alias","slug":"resolve-alias"},{"level":2,"title":"resolve.dedupe","slug":"resolve-dedupe"},{"level":2,"title":"resolve.conditions","slug":"resolve-conditions"},{"level":2,"title":"resolve.mainFields","slug":"resolve-mainfields"},{"level":2,"title":"resolve.extensions","slug":"resolve-extensions"},{"level":2,"title":"resolve.preserveSymlinks","slug":"resolve-preservesymlinks"},{"level":2,"title":"css.modules","slug":"css-modules"},{"level":2,"title":"css.postcss","slug":"css-postcss"},{"level":2,"title":"css.preprocessorOptions","slug":"css-preprocessoroptions"},{"level":2,"title":"css.devSourcemap","slug":"css-devsourcemap"},{"level":2,"title":"json.namedExports","slug":"json-namedexports"},{"level":2,"title":"json.stringify","slug":"json-stringify"},{"level":2,"title":"esbuild","slug":"esbuild"},{"level":2,"title":"assetsInclude","slug":"assetsinclude"},{"level":2,"title":"logLevel","slug":"loglevel"},{"level":2,"title":"clearScreen","slug":"clearscreen"},{"level":2,"title":"envDir","slug":"envdir"},{"level":2,"title":"envPrefix","slug":"envprefix"},{"level":2,"title":"appType","slug":"apptype"}],"relativePath":"config/shared-options.md"}'),n={name:"config/shared-options.md"},l=a(`<h1 id="shared-options" tabindex="-1">Shared Options <a class="header-anchor" href="#shared-options" aria-hidden="true">#</a></h1><h2 id="root" tabindex="-1">root <a class="header-anchor" href="#root" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>process.cwd()</code></li></ul><p>Project root directory (where <code>index.html</code> is located). Can be an absolute path, or a path relative to the current working directory.</p><p>See <a href="/guide/#index-html-and-project-root">Project Root</a> for more details.</p><h2 id="base" tabindex="-1">base <a class="header-anchor" href="#base" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>/</code></li></ul><p>Base public path when served in development or production. Valid values include:</p><ul><li>Absolute URL pathname, e.g. <code>/foo/</code></li><li>Full URL, e.g. <code>https://foo.com/</code></li><li>Empty string or <code>./</code> (for embedded deployment)</li></ul><p>See <a href="/guide/build.html#public-base-path">Public Base Path</a> for more details.</p><h2 id="mode" tabindex="-1">mode <a class="header-anchor" href="#mode" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>&#39;development&#39;</code> for serve, <code>&#39;production&#39;</code> for build</li></ul><p>Specifying this in config will override the default mode for <strong>both serve and build</strong>. This value can also be overridden via the command line <code>--mode</code> option.</p><p>See <a href="/guide/env-and-mode.html">Env Variables and Modes</a> for more details.</p><h2 id="define" tabindex="-1">define <a class="header-anchor" href="#define" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>Record&lt;string, string&gt;</code></li></ul><p>Define global constant replacements. Entries will be defined as globals during dev and statically replaced during build.</p><ul><li><p>Starting from <code>2.0.0-beta.70</code>, string values will be used as raw expressions, so if defining a string constant, it needs to be explicitly quoted (e.g. with <code>JSON.stringify</code>).</p></li><li><p>To be consistent with <a href="https://esbuild.github.io/api/#define" target="_blank" rel="noopener noreferrer">esbuild behavior</a>, expressions must either be a JSON object (null, boolean, number, string, array, or object) or a single identifier.</p></li><li><p>Replacements are performed only when the match isn&#39;t surrounded by other letters, numbers, <code>_</code> or <code>$</code>.</p></li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>Because it&#39;s implemented as straightforward text replacements without any syntax analysis, we recommend using <code>define</code> for CONSTANTS only.</p><p>For example, <code>process.<wbr>env.FOO</code> and <code>__APP_VERSION__</code> are good fits. But <code>process</code> or <code>global</code> should not be put into this option. Variables can be shimmed or polyfilled instead.</p></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>For TypeScript users, make sure to add the type declarations in the <code>env.d.ts</code> or <code>vite-env.d.ts</code> file to get type checks and Intellisense.</p><p>Example:</p><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#676E95;font-style:italic;">// vite-env.d.ts</span></span>
<span class="line"><span style="color:#C792EA;">declare</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> __APP_VERSION__</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"></span></code></pre></div></div><div class="tip custom-block"><p class="custom-block-title">NOTE</p><p>Since dev and build implement <code>define</code> differently, we should avoid some use cases to avoid inconsistency.</p><p>Example:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> obj </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  __NAME__</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Don&#39;t define object shorthand property names</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">__KEY__</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> value </span><span style="color:#676E95;font-style:italic;">// Don&#39;t define object key</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></div><h2 id="plugins" tabindex="-1">plugins <a class="header-anchor" href="#plugins" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>(Plugin | Plugin[] | Promise&lt;Plugin | Plugin[]&gt;)[]</code></li></ul><p>Array of plugins to use. Falsy plugins are ignored and arrays of plugins are flattened. If a promise is returned, it would be resolved before running. See <a href="/guide/api-plugin.html">Plugin API</a> for more details on Vite plugins.</p><h2 id="publicdir" tabindex="-1">publicDir <a class="header-anchor" href="#publicdir" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string | false</code></li><li><strong>Default:</strong> <code>&quot;public&quot;</code></li></ul><p>Directory to serve as plain static assets. Files in this directory are served at <code>/</code> during dev and copied to the root of <code>outDir</code> during build, and are always served or copied as-is without transform. The value can be either an absolute file system path or a path relative to project root.</p><p>Defining <code>publicDir</code> as <code>false</code> disables this feature.</p><p>See <a href="/guide/assets.html#the-public-directory">The <code>public</code> Directory</a> for more details.</p><h2 id="cachedir" tabindex="-1">cacheDir <a class="header-anchor" href="#cachedir" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>&quot;node_modules/.vite&quot;</code></li></ul><p>Directory to save cache files. Files in this directory are pre-bundled deps or some other cache files generated by vite, which can improve the performance. You can use <code>--force</code> flag or manually delete the directory to regenerate the cache files. The value can be either an absolute file system path or a path relative to project root. Default to <code>.vite</code> when no package.json is detected.</p><h2 id="resolve-alias" tabindex="-1">resolve.alias <a class="header-anchor" href="#resolve-alias" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong><code>Record&lt;string, string&gt; | Array&lt;{ find: string | RegExp, replacement: string, customResolver?: ResolverFunction | ResolverObject }&gt;</code></li></ul><p>Will be passed to <code>@rollup/plugin-alias</code> as its <a href="https://github.com/rollup/plugins/tree/master/packages/alias#entries" target="_blank" rel="noopener noreferrer">entries option</a>. Can either be an object, or an array of <code>{ find, replacement, customResolver }</code> pairs.</p><p>When aliasing to file system paths, always use absolute paths. Relative alias values will be used as-is and will not be resolved into file system paths.</p><p>More advanced custom resolution can be achieved through <a href="/guide/api-plugin.html">plugins</a>.</p><h2 id="resolve-dedupe" tabindex="-1">resolve.dedupe <a class="header-anchor" href="#resolve-dedupe" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>If you have duplicated copies of the same dependency in your app (likely due to hoisting or linked packages in monorepos), use this option to force Vite to always resolve listed dependencies to the same copy (from project root).</p><div class="warning custom-block"><p class="custom-block-title">SSR + ESM</p><p>For SSR builds, deduplication does not work for ESM build outputs configured from <code>build.rollupOptions.output</code>. A workaround is to use CJS build outputs until ESM has better plugin support for module loading.</p></div><h2 id="resolve-conditions" tabindex="-1">resolve.conditions <a class="header-anchor" href="#resolve-conditions" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li></ul><p>Additional allowed conditions when resolving <a href="https://nodejs.org/api/packages.html#packages_conditional_exports" target="_blank" rel="noopener noreferrer">Conditional Exports</a> from a package.</p><p>A package with conditional exports may have the following <code>exports</code> field in its <code>package.json</code>:</p><div class="language-json"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C792EA;">exports</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#FFCB6B;">.</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">import</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.mjs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F78C6C;">require</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./index.js</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div><p>Here, <code>import</code> and <code>require</code> are &quot;conditions&quot;. Conditions can be nested and should be specified from most specific to least specific.</p><p>Vite has a list of &quot;allowed conditions&quot; and will match the first condition that is in the allowed list. The default allowed conditions are: <code>import</code>, <code>module</code>, <code>browser</code>, <code>default</code>, and <code>production/development</code> based on current mode. The <code>resolve.conditions</code> config option allows specifying additional allowed conditions.</p><div class="warning custom-block"><p class="custom-block-title">Resolving subpath exports</p><p>Export keys ending with &quot;/&quot; is deprecated by Node and may not work well. Please contact the package author to use <a href="https://nodejs.org/api/packages.html#package-entry-points" target="_blank" rel="noopener noreferrer"><code>*</code> subpath patterns</a> instead.</p></div><h2 id="resolve-mainfields" tabindex="-1">resolve.mainFields <a class="header-anchor" href="#resolve-mainfields" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[&#39;module&#39;, &#39;jsnext:main&#39;, &#39;jsnext&#39;]</code></li></ul><p>List of fields in <code>package.json</code> to try when resolving a package&#39;s entry point. Note this takes lower precedence than conditional exports resolved from the <code>exports</code> field: if an entry point is successfully resolved from <code>exports</code>, the main field will be ignored.</p><h2 id="resolve-extensions" tabindex="-1">resolve.extensions <a class="header-anchor" href="#resolve-extensions" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string[]</code></li><li><strong>Default:</strong> <code>[&#39;.mjs&#39;, &#39;.js&#39;, &#39;.ts&#39;, &#39;.jsx&#39;, &#39;.tsx&#39;, &#39;.json&#39;]</code></li></ul><p>List of file extensions to try for imports that omit extensions. Note it is <strong>NOT</strong> recommended to omit extensions for custom import types (e.g. <code>.vue</code>) since it can interfere with IDE and type support.</p><h2 id="resolve-preservesymlinks" tabindex="-1">resolve.preserveSymlinks <a class="header-anchor" href="#resolve-preservesymlinks" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Enabling this setting causes vite to determine file identity by the original file path (i.e. the path without following symlinks) instead of the real file path (i.e. the path after following symlinks).</p><ul><li><strong>Related:</strong> <a href="https://esbuild.github.io/api/#preserve-symlinks" target="_blank" rel="noopener noreferrer">esbuild#preserve-symlinks</a>, <a href="https://webpack.js.org/configuration/resolve/#resolvesymlinks" target="_blank" rel="noopener noreferrer">webpack#resolve.symlinks </a></li></ul><h2 id="css-modules" tabindex="-1">css.modules <a class="header-anchor" href="#css-modules" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong><div class="language-ts"><span class="copy"></span><pre><code><span class="line"><span style="color:#C792EA;">interface</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CSSModulesOptions</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">scopeBehaviour</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">global</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">local</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">globalModulePaths</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">RegExp</span><span style="color:#A6ACCD;">[]</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">generateScopedName</span><span style="color:#89DDFF;">?:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;">(name</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">hashPrefix</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">string</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#676E95;font-style:italic;">/**</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   * default: null</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">   */</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">localsConvention</span><span style="color:#89DDFF;">?:</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">camelCase</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">camelCaseOnly</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dashes</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">dashesOnly</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">|</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">null</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span>
<span class="line"></span></code></pre></div></li></ul><p>Configure CSS modules behavior. The options are passed on to <a href="https://github.com/css-modules/postcss-modules" target="_blank" rel="noopener noreferrer">postcss-modules</a>.</p><h2 id="css-postcss" tabindex="-1">css.postcss <a class="header-anchor" href="#css-postcss" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string | (postcss.ProcessOptions &amp; { plugins?: postcss.AcceptedPlugin[] })</code></li></ul><p>Inline PostCSS config or a custom directory to search PostCSS config from (default is project root).</p><p>For inline PostCSS config, it expects the same format as <code>postcss.config.js</code>. But for <code>plugins</code> property, only <a href="https://github.com/postcss/postcss-load-config/blob/main/README.md#array" target="_blank" rel="noopener noreferrer">array format</a> can be used.</p><p>The search is done using <a href="https://github.com/postcss/postcss-load-config" target="_blank" rel="noopener noreferrer">postcss-load-config</a> and only the supported config file names are loaded.</p><p>Note if an inline config is provided, Vite will not search for other PostCSS config sources.</p><h2 id="css-preprocessoroptions" tabindex="-1">css.preprocessorOptions <a class="header-anchor" href="#css-preprocessoroptions" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>Record&lt;string, object&gt;</code></li></ul><p>Specify options to pass to CSS pre-processors. The file extensions are used as keys for the options. Example:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">css</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">preprocessorOptions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">scss</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">additionalData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">$injectedColor: orange;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">styl</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">additionalData</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">$injectedColor ?= orange</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="css-devsourcemap" tabindex="-1">css.devSourcemap <a class="header-anchor" href="#css-devsourcemap" aria-hidden="true">#</a></h2><ul><li><strong>Experimental</strong></li><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>Whether to enable sourcemaps during dev.</p><h2 id="json-namedexports" tabindex="-1">json.namedExports <a class="header-anchor" href="#json-namedexports" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Whether to support named imports from <code>.json</code> files.</p><h2 id="json-stringify" tabindex="-1">json.stringify <a class="header-anchor" href="#json-stringify" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>false</code></li></ul><p>If set to <code>true</code>, imported JSON will be transformed into <code>export default JSON.parse(&quot;...&quot;)</code> which is significantly more performant than Object literals, especially when the JSON file is large.</p><p>Enabling this disables named imports.</p><h2 id="esbuild" tabindex="-1">esbuild <a class="header-anchor" href="#esbuild" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>ESBuildOptions | false</code></li></ul><p><code>ESBuildOptions</code> extends <a href="https://esbuild.github.io/api/#transform-api" target="_blank" rel="noopener noreferrer">esbuild&#39;s own transform options</a>. The most common use case is customizing JSX:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">esbuild</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxFactory</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">h</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxFragment</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">Fragment</span><span style="color:#89DDFF;">&#39;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>By default, esbuild is applied to <code>ts</code>, <code>jsx</code> and <code>tsx</code> files. You can customize this with <code>esbuild.include</code> and <code>esbuild.exclude</code>, which can be a regex, a <a href="https://github.com/micromatch/picomatch#globbing-features" target="_blank" rel="noopener noreferrer">picomatch</a> pattern, or an array of either.</p><p>In addition, you can also use <code>esbuild.jsxInject</code> to automatically inject JSX helper imports for every file transformed by esbuild:</p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">esbuild</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">jsxInject</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">import React from &#39;react&#39;</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><p>When <a href="./build-options.html#build-minify"><code>build.minify</code></a> is <code>true</code>, all minify optimizations are applied by default. To disable <a href="https://esbuild.github.io/api/#minify" target="_blank" rel="noopener noreferrer">certain aspects</a> of it, set any of <code>esbuild.minifyIdentifiers</code>, <code>esbuild.minifySyntax</code>, or <code>esbuild.minifyWhitespace</code> options to <code>false</code>. Note the <code>esbuild.minify</code> option can&#39;t be used to override <code>build.minify</code>.</p><p>Set to <code>false</code> to disable esbuild transforms.</p><h2 id="assetsinclude" tabindex="-1">assetsInclude <a class="header-anchor" href="#assetsinclude" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string | RegExp | (string | RegExp)[]</code></li><li><strong>Related:</strong> <a href="/guide/assets.html">Static Asset Handling</a></li></ul><p>Specify additional <a href="https://github.com/micromatch/picomatch#globbing-features" target="_blank" rel="noopener noreferrer">picomatch patterns</a> to be treated as static assets so that:</p><ul><li><p>They will be excluded from the plugin transform pipeline when referenced from HTML or directly requested over <code>fetch</code> or XHR.</p></li><li><p>Importing them from JS will return their resolved URL string (this can be overwritten if you have a <code>enforce: &#39;pre&#39;</code> plugin to handle the asset type differently).</p></li></ul><p>The built-in asset type list can be found <a href="https://github.com/vitejs/vite/blob/main/packages/vite/src/node/constants.ts" target="_blank" rel="noopener noreferrer">here</a>.</p><p><strong>Example:</strong></p><div class="language-js"><span class="copy"></span><pre><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">defineConfig</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">assetsInclude</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">**/*.gltf</span><span style="color:#89DDFF;">&#39;</span><span style="color:#A6ACCD;">]</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"></span></code></pre></div><h2 id="loglevel" tabindex="-1">logLevel <a class="header-anchor" href="#loglevel" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>&#39;info&#39; | &#39;warn&#39; | &#39;error&#39; | &#39;silent&#39;</code></li></ul><p>Adjust console output verbosity. Default is <code>&#39;info&#39;</code>.</p><h2 id="clearscreen" tabindex="-1">clearScreen <a class="header-anchor" href="#clearscreen" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>boolean</code></li><li><strong>Default:</strong> <code>true</code></li></ul><p>Set to <code>false</code> to prevent Vite from clearing the terminal screen when logging certain messages. Via command line, use <code>--clearScreen false</code>.</p><h2 id="envdir" tabindex="-1">envDir <a class="header-anchor" href="#envdir" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string</code></li><li><strong>Default:</strong> <code>root</code></li></ul><p>The directory from which <code>.env</code> files are loaded. Can be an absolute path, or a path relative to the project root.</p><p>See <a href="/guide/env-and-mode.html#env-files">here</a> for more about environment files.</p><h2 id="envprefix" tabindex="-1">envPrefix <a class="header-anchor" href="#envprefix" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>string | string[]</code></li><li><strong>Default:</strong> <code>VITE_</code></li></ul><p>Env variables starts with <code>envPrefix</code> will be exposed to your client source code via import.<wbr>meta.env.</p><div class="warning custom-block"><p class="custom-block-title">SECURITY NOTES</p><p><code>envPrefix</code> should not be set as <code>&#39;&#39;</code>, which will expose all your env variables and cause unexpected leaking of of sensitive information. Vite will throw error when detecting <code>&#39;&#39;</code>.</p></div><h2 id="apptype" tabindex="-1">appType <a class="header-anchor" href="#apptype" aria-hidden="true">#</a></h2><ul><li><strong>Type:</strong> <code>&#39;spa&#39; | &#39;mpa&#39; | &#39;custom&#39;</code></li><li><strong>Default:</strong> <code>&#39;spa&#39;</code></li></ul><p>Whether your application is a Single Page Application (SPA), a <a href="./../guide/build.html#multi-page-app">Multi Page Application (MPA)</a>, or Custom Application (SSR and frameworks with custom HTML handling):</p><ul><li><code>&#39;spa&#39;</code>: include SPA fallback middleware and configure <a href="https://github.com/lukeed/sirv" target="_blank" rel="noopener noreferrer">sirv</a> with <code>single: true</code> in preview</li><li><code>&#39;mpa&#39;</code>: only include non-SPA HTML middlewares</li><li><code>&#39;custom&#39;</code>: don&#39;t include HTML middlewares</li></ul><p>Learn more in Vite&#39;s <a href="/guide/ssr.html#vite-cli">SSR guide</a>. Related: <a href="./server-options.html#server-middlewaremode"><code>server.middlewareMode</code></a>.</p>`,117),t=[l];function r(p,i,c,d,u,y){return o(),s("div",null,t)}var g=e(n,[["render",r]]);export{D as __pageData,g as default};
